#linux code

sudo dnf install nodejs -y

#install pm2 for manage & restart node
sudo npm install -g pm2
pm2 start app.js
pm2 startup
pm2 save

pm2 list
pm2 stop my-app
pm2 restart my-app
pm2 delete my-app

//after setup ecosytem file
pm2 start ecosystem.config.js --env staging


# move to root
sudo su - root

#to install monogdb
sudo vi /etc/yum.repos.d/mongodb-org-8.0.repo

#pase below code for mongodb

[mongodb-org-8.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/amazon/2023/mongodb-org/8.0/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-8.0.asc

#for save in this editor use :wq


#install mongodb
sudo yum install -y mongodb-org

#this thi to from  127.0.0.1 to 0.0.0.0
sudo nano /etc/mongod.conf

bindIp: 0.0.0.0

Get EC2 public IP
curl http://checkip.amazonaws.com

so mongodb://<ec2-public-ip>:27017 for mondodb compass


sudo systemctl start mongod
sudo systemctl enable mongod
sudo systemctl status mongod
sudo systemctl restart mongod




db.createUser({
  user: "admin",
  pwd: "admin",
  roles: [{ role: "readWrite", db: "user_db" }]
})

mongodb://admin:admin@13.232.7.190:27017/user_db

#pull from git in ec2
sudo yum install git -y
#cd funora_backend
#git pull origin main


#set .env file
nano /home/ec2-user/funora_backend/.env
#Step 2: Add variables
PORT=3000
MONGO_URI=mongodb://admin:admin@13.232.7.190:27017/user_db?authSource=admin

#& save this


# move to repositary for git pull, check file, folder
cd /home/ec2-user/funora_backend
git pull origin main

pwd  # Get the current directory
ls   # List files

pm2 logs server

# to check all file is present or not
ls -la /home/ec2-user/funora_backend/src/config/


$ run this command to add this file becoz it is mention in gitignore
and paste json value and save it
nano /home/ec2-user/funora_backend/src/config/serviceAccountKey.json


//for aws we are using redis6

to install redis we have to use ElastiCache
add inbound rule to both redis secruity group as well as ec2 secruity group (most important step)
IPv4
Custom TCP
TCP
6379
172.31.0.0/16

to start redis server
redis6-cli -h funora-redis-bvhl3j.serverless.eun1.cache.amazonaws.com -p 6379 --tls
ping => pong


// to use redis in local 
//add .pem file first to ec2 and ubuntu on local
nano my-key.pem

//to give permission
chmod 400 my-key.pem

//Run the SSH tunnel command
ssh -i my-key.pem -L 6379:funora-redis-bvhl3j.serverless.eun1.cache.amazonaws.com:6379 ec2-user@16.171.9.190

or

ssh -i funora-server.pem -L 6379:funora-redis-bvhl3j.serverless.eun1.cache.amazonaws.com:6379 ec2-user@16.171.9.190

//create tunnel
redis-cli -h 127.0.0.1 -p 6379 --tls


Project Console: https://console.firebase.google.com/project/funora-4d19f/overview
Hosting URL: https://funora-4d19f.web.app



#step to use funora job in ec2
#create ec2 instalce for aws linux
sudo dnf update -y

sudo dnf install -y docker
sudo systemctl enable docker
sudo systemctl start docker

docker --version

#Add your user to the Docker group
sudo usermod -aG docker ec2-user

exit
ssh -i your-key.pem ec2-user@<your-ec2-public-ip>
#refresh ec2 page 

docker run -d --name redis -p 6379:6379 redis:7
docker ps

#Remove the existing container
docker rm -f redis

#Then you can rerun your Redis container:
docker run -d \
  --name redis \
  -p 6379:6379 \
  -v ~/redis-data:/data \
  redis:7 \
  redis-server --appendonly yes --bind 0.0.0.0

#0.0.0.0 for expose to local


#setup redis in contain recomanded
docker run -d --name redis \
  -p 6379:6379 \
  redis redis-server --requirepass "YourStrongPassword"

#check redis connection
redis-cli -h 16.171.149.165 -p 6379 -a YourStrongPassword

#to access server  base url need to setup tcp
#AWS Console → EC2 → Your Instance → Security → Inbound Rules.
Custom TCP 4000  0.0.0.0/0


#Check running containers
docker ps -a

#start redis
docker start redis

#Use redis-cli inside the Docker container
#check redis is working or not it give=> pong
docker exec -it redis redis-cli ping


sudo dnf install git -y
git --version

git clone https://github.com/ravikumar444411/funora_job.git funora_job
cd funora_job

#install node js
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
source ~/.nvm/nvm.sh
nvm install --lts
nvm use --lts

#now do 
npm install
npm install -g pm2

#create file like env, google-service.json with nano
pm2 start npm --name funora-job -- run start:prod
pm2 save

#go to repo location
cd /funora_job/funora_job

#to access server  base url need to setup tcp
#AWS Console → EC2 → Your Instance → Security → Inbound Rules.
Custom TCP 4000  0.0.0.0/0




Install cloudflared manually on Amazon Linux (EC2)
# Go to your home directory
cd ~

# Download the latest release (Linux x86_64)
wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64

# Make it executable
chmod +x cloudflared-linux-amd64

# Move to /usr/local/bin so it’s globally available
sudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared

# Verify installation
cloudflared --version

# run from the same account that runs your app (ec2-user)
cloudflared tunnel --url http://localhost:3000



#create jks file
keytool -genkeypair -v -keystore "F:\funora\code base\frontend\funora_new_7\android\app\funora-release-key.jks" -alias funora-key -keyalg RSA -keysize 2048 -validity 10000


#Check if debug.keystore exists
dir C:\Users\HP\.android
#et SHA-1 & SHA-256
keytool -list -v -alias androiddebugkey -keystore C:\Users\HP\.android\debug.keystore -storepass android -keypass android
